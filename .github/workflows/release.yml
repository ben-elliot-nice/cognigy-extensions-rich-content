name: Release

on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Creating release for version: $VERSION"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️  Tag v${{ steps.version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Tag v${{ steps.version.outputs.version }} does not exist, will create"
          fi

      - name: Install dependencies
        if: steps.check_tag.outputs.exists == 'false'
        run: npm ci

      - name: Run build
        if: steps.check_tag.outputs.exists == 'false'
        run: npm run build

      - name: Get package name
        if: steps.check_tag.outputs.exists == 'false'
        id: package_name
        run: |
          NAME=$(node -p "require('./package.json').name")
          echo "name=$NAME" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            ${{ steps.package_name.outputs.name }}-${{ steps.version.outputs.version }}.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip release creation
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          echo "Tag v${{ steps.version.outputs.version }} already exists. Skipping release creation."
          echo "If you need to create a new release, bump the version in package.json."
